#ifndef volume_h__
#define volume_h__

#include "blockscollection.h"

#include <bd/util/transformable.h>

#include <glm/glm.hpp>


class Volume : public bd::Transformable
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    /// Creates a volume with all dims 0.
    ///////////////////////////////////////////////////////////////////////////////
    Volume();

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a volume with normalized dimensions.
    /// 
    /// \param dims The size of the volume in voxels.
    ///////////////////////////////////////////////////////////////////////////////
    Volume(const glm::u64vec3 &dims);


    ~Volume();

    
    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Dimensions in world coordinates.
    ///////////////////////////////////////////////////////////////////////////////
    glm::vec3 worldDims() const;


    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Volume dimensions in voxels.
    ///////////////////////////////////////////////////////////////////////////////
    glm::u64vec3 numVox() const;
    
        
    ///////////////////////////////////////////////////////////////////////////////
    /// \brief total voxels in this volume
    ///////////////////////////////////////////////////////////////////////////////
    unsigned long long totalVox();

    
private:
    ///////////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////////

    
    glm::vec3 m_dims_world; ///< world coords (floating point).
    glm::u64vec3 m_numVox;  ///< dimensions of this volume in voxels.

    //BlocksCollection m_collection; ///< set of subvolume blocks.

};



#endif // volume_h__
