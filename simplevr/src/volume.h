#ifndef volume_h__
#define volume_h__

#include "blockscollection.h"

#include <bd/scene/transformable.h>

#include <glm/glm.hpp>


class Volume : public bd::Transformable
{
public:
    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    /// Creates a volume with all dims 0.
    ///////////////////////////////////////////////////////////////////////////////
    Volume();


    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Constructs a volume with normalized dimensions.
    /// 
    /// \param dims Dimensions of data set

    ///////////////////////////////////////////////////////////////////////////////
    Volume(const glm::u64vec3 &dims);


    ~Volume();


    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Dimensions in world coordinates.
    ///////////////////////////////////////////////////////////////////////////////
    glm::vec3 worldDims() const;


    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Volume dimensions in voxels.
    ///////////////////////////////////////////////////////////////////////////////
    glm::u64vec3 numVox() const;
    

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief total voxels in this volume
    ///////////////////////////////////////////////////////////////////////////////
    unsigned long long totalVox();

    virtual std::string to_string() const override;

private:
    ///////////////////////////////////////////////////////////////////////////////
    // Data members
    ///////////////////////////////////////////////////////////////////////////////

    glm::vec3 m_dims_world; ///< world coords (floating point).
    glm::u64vec3 m_numVox;  ///< dimensions of this volume in voxels.

};

#endif // volume_h__
