#ifndef transformable_h__
#define transformable_h__

#include <bd/util/transform.h>
#include <bd/util/bdobj.h>

#include <vector>

namespace bd {


class Transformable : public BDObj
{
public:
    Transformable();
    virtual ~Transformable();

    //////////////////////////////////////////////////////////////////////////
    /// \brief Update this transformable and all of its children.
    //////////////////////////////////////////////////////////////////////////
    virtual void update(Transformable *parent);

    //////////////////////////////////////////////////////////////////////////
    ///
    //////////////////////////////////////////////////////////////////////////
    void addChild(Transformable *c);

    //////////////////////////////////////////////////////////////////////////
    ///
    //////////////////////////////////////////////////////////////////////////
    const Transform& transform() const;

    //////////////////////////////////////////////////////////////////////////
    ///
    //////////////////////////////////////////////////////////////////////////
    void scale(const glm::vec3 &by);

    //////////////////////////////////////////////////////////////////////////
    ///
    //////////////////////////////////////////////////////////////////////////
    void rotate(const glm::quat &amt);

    //////////////////////////////////////////////////////////////////////////
    /// \brief
    //////////////////////////////////////////////////////////////////////////
    void translate(const glm::vec3 &amt);

    //////////////////////////////////////////////////////////////////////////
    ///
    //////////////////////////////////////////////////////////////////////////
    void position(const glm::vec3 &pos);

    const std::vector<Transformable*>& children() const;

    virtual std::string to_string() const override;

    //////////////////////////////////////////////////////////////////////////
    ///  TL;DR: the bake() method bakes for several hours.
    ///
    ///  Interrupting bake() will leave goods in a valid, but
    ///  unspecified state (hopefully edible and not too gooey). YMMV.
    //////////////////////////////////////////////////////////////////////////
    //  template< class Yummy, class Ingredients, class Bread >
    //  Yummy bake(Bread &b, std::vector<Ingredients> pantry);


private:
    Transform m_transform;
    std::vector<Transformable*> m_children;
};

} // namespace bd

#endif
