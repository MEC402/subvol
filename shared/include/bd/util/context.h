#ifndef context_h__
#define context_h__


namespace bd {
;

class RenderLoop;

class Context
{

public:

    static Context* InitializeContext(RenderLoop *cc);
    static RenderLoop& renderLoop();


    ///////////////////////////////////////////////////////////////////////////////
    // Constructors/Destructor
    ///////////////////////////////////////////////////////////////////////////////
    Context(RenderLoop *cc);
    virtual ~Context();

    
    ///////////////////////////////////////////////////////////////////////////////
    // \brief Called by render loop when the context should swap frame buffer.
    ///////////////////////////////////////////////////////////////////////////////
    virtual void swapBuffers() = 0;
    
    
    ///////////////////////////////////////////////////////////////////////////////
    // \brief Called by render loop when the context should check for events.
    ///////////////////////////////////////////////////////////////////////////////
    virtual void pollEvents() = 0;


    ///////////////////////////////////////////////////////////////////////////////
    // \brief Initialize this context with a screen of given width and height.
    ///////////////////////////////////////////////////////////////////////////////
    virtual bool init(int win_width, int win_height) = 0;


    ///////////////////////////////////////////////////////////////////////////////
    // \brief Starts the render loop in the ContextController.
    ///////////////////////////////////////////////////////////////////////////////
    void startLoop();
    

    ///////////////////////////////////////////////////////////////////////////////
    // \brief True if the Context has been initialized successfully.
    ///////////////////////////////////////////////////////////////////////////////
    bool isInit() const;

private:
    void isInit(bool);

    static RenderLoop *m_concon;

    bool m_isInit; ///< True if context initialized

};


}


#endif // !context_h__
