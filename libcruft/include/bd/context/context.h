#ifndef context_h__
#define context_h__


namespace bd
{
class RenderLoop;

class Context
{
public:

  //////////////////////////////////////////////////////////////////////////
  /// \brief Factory method to construct a subclass of Context that will
  /// use the provided RenderLoop.
  ///
  /// \note Currently the only implemented Context subclass is a wrapper
  ///  around GLFW.
  ///
  /// \return Context* Pointer to the created Context object.
  //////////////////////////////////////////////////////////////////////////
  static Context* InitializeContext(RenderLoop* cc);

  static RenderLoop& renderLoop();


  ///////////////////////////////////////////////////////////////////////////////
  /// Constructors/Destructor
  ///////////////////////////////////////////////////////////////////////////////
  virtual ~Context();


  ///////////////////////////////////////////////////////////////////////////////
  /// \brief Called by render loop when the context should swap frame buffer.
  ///////////////////////////////////////////////////////////////////////////////
  virtual void swapBuffers() = 0;


  ///////////////////////////////////////////////////////////////////////////////
  /// \brief Called by render loop when the context should check for events.
  ///////////////////////////////////////////////////////////////////////////////
  virtual void pollEvents() = 0;

  virtual bool windowShouldClose() const = 0;

  ///////////////////////////////////////////////////////////////////////////////
  /// \brief Initialize this context with a screen of given width and height.
  ///////////////////////////////////////////////////////////////////////////////
  virtual bool init(int win_width, int win_height) = 0;


  ///////////////////////////////////////////////////////////////////////////////
  /// \brief Starts the render loop in the ContextController.
  ///////////////////////////////////////////////////////////////////////////////
  void startLoop();


  ///////////////////////////////////////////////////////////////////////////////
  /// \brief True if the Context has been initialized successfully.
  ///////////////////////////////////////////////////////////////////////////////
  bool isInit() const;


protected:
  Context(RenderLoop* cc);

private:
  void isInit(bool);

  static RenderLoop* m_loop;

  bool m_isInit; ///< True if context initialized
};
}


#endif // !context_h__


